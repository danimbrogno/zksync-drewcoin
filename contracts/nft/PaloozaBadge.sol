// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Base64.sol";

/**
 * @title MyNFT
 * @dev Basic ERC721 token with auto-incrementing token IDs.
 * The owner can mint new tokens. Token URIs are autogenerated based on a base URI.
 */
contract PaloozaBadge is ERC721Enumerable, Ownable {
    
    string public _name;
    string public _description;
    string public _attribute;
    uint256 public _generation;
    uint256 public _quantity;

    using Counters for Counters.Counter;
    Counters.Counter private _tokenIdTracker;
    string private _baseTokenURI;

    constructor(string memory name, string memory symbol, string memory description, uint256 generation, uint256 quantity) ERC721(name, symbol) {
        _name = name;
        _description = description;
        _generation = generation;
        _quantity = quantity;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return '';
    }

    function tokenURI(uint256 tokenId_) public view override(ERC721) returns (string memory) {
        string memory json = Base64.encode(
            bytes(
                string(
                    abi.encodePacked(
                        '{"name": "',
                        _name,
                        ' #',
                        toString(tokenId_),
                        '", "description": "',
                        _description,
                        '", "attributes": [{"generation":"',
                        toString(_generation),
                        '", "value": "',
                        toString(tokenId_),
                        '"}]}'
                    )
                )
            )
        );
        return string(abi.encodePacked("data:application/json;base64,", json));
    }

    /**
     * @dev Mints a new token to the specified address.
     * Only the owner can mint new tokens.
     * @param to The address that will receive the minted token.
     */
    function mint(address to) external onlyOwner {
        if (_tokenIdTracker.current() >= _quantity) {
            revert("No more tokens available");
        }
        _tokenIdTracker.increment();
        _mint(to, _tokenIdTracker.current());
    }

    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    // Additional functions or overrides can be added here if needed.
}
